{"version":3,"sources":["../LinkedList.js"],"names":["LinkedList","Node","element","next","length","head","append","node","current","insert","position","previous","index","removeAt","remove","indexOf","isEmpty","size","toString","string","getHead","print","list"],"mappings":"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","file":"LinkedList.js","sourcesContent":["function LinkedList() {\n    let Node = function (element) {\n        this.element = element;\n        this.next = null;\n    };\n\n    let length = 0;\n    let head = null;\n\n    this.append = function (element) {\n        let node = new Node(element),\n            current;\n\n        if (head === null) { // first node on list\n            head = node;\n        } else {\n            current = head;\n\n            // loop the list until find last item\n            while (current.next) {\n                current = current.next;\n            }\n\n            // get last item and assign next to node to make the link\n            current.next = node;\n        }\n\n        length++; // update the size of the list\n    };\n\n    this.insert = function (position, element) {\n        // check for out of bound values\n        if (position > 0 && position <= length) {\n            let node = new Node(element),\n                current = head,\n                previous,\n                next;\n\n            if (position === 0) {\n                node.next = current;\n                head = node;\n            } else {\n                while (index++ < position) {\n                    previous = current;\n                    current = current.next;\n                }\n                node.next = current;\n                previous.next = node;\n            }\n\n            length++;\n\n            return true;\n        } else {\n            return false;\n        }\n    };\n\n    this.removeAt = function (position) {\n        // check for out-of-bounds values\n        if (position > -1 && position < length) {\n\n            let current = head,\n                previous,\n                index = 0;\n\n            // removing the first item\n            if (position === 0) {\n                head = current.next;\n            } else {\n                while (index++ < position) {\n                    previous = current;\n                    current = current.next;\n                }\n                // link previous with current's next: skip it to remove\n                previous.next = current.next;\n            }\n\n            length--;\n\n            return current.element;\n        } else {\n            return null;\n        }\n    };\n\n    this.remove = function (element) {\n        let index = this.indexOf(element);\n        return this.removeAt(index);\n    };\n\n    this.indexOf = function (element) {\n        let current = head, //{1}\n            index = -1;\n\n        while (current) {   //{2}\n            if (element === current.element) {\n                return index;       //{3}\n            }\n            index++;                //{4}\n            current = current.next; //{5}\n        }\n\n        return -1;\n    };\n\n    this.isEmpty = function () {\n        return length === 0;\n    };\n\n    this.size = function () {\n        return length;\n    };\n\n    this.toString = function () {\n        let current = head, //{1}\n            string = '';    //{2}\n\n        while (current) {   //{3}\n            string += current.element + (current.next ? 'n' : '');//{4}\n            current = current.next;   //{5}\n        }\n        return string;                //{6}\n    };\n\n    this.getHead = function(){\n        return head;\n    };\n\n    this.print = function () {\n    };\n}\n\nlet list = new LinkedList();\nlist.append(15);\nlist.append(10);"]}