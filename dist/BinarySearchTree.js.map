{"version":3,"sources":["../BinarySearchTree.js"],"names":["BinarySearchTree","Node","key","left","right","root","heightNode","node","Math","max","insertNode","element","inOrderTraverseNode","callback","preOrderTraverseNode","postOrderTraverseNode","minNode","maxNode","searchNode","findMinNode","removeNode","aux","insert","newNode","search","inOrderTraverse","preOrderTraverse","postOrderTraverse","min","remove","printNode","value","console","log","tree"],"mappings":"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","file":"BinarySearchTree.js","sourcesContent":["function BinarySearchTree() {\n    const Node = function(key) {\n        this.key = key;\n        this.left = null;\n        this.right = null;\n    };\n\n    var root = null;\n\n    var heightNode = function(node) {\n        if (node === null) {\n            return -1;\n        }else {\n            return Math.max(heightNode(node.left),\n            heightNode(node.right)) + 1;\n        }\n    };\n\n    var insertNode = function(node, element) {\n        if(node === null){\n            node = new Node(element);\n        } else if(element.key < node.key){\n            node.left = insertNode(node.left, element);\n\n            if (node.left !== null) {\n                // verify if balancing is needed\n                if ((heightNode(node.left) - heightNode(node.right)) > 1){\n                    // do rotations {3}\n                }\n            }\n        } else if (element > node.key) {\n            node.right = insertNode(node.right, element);\n\n            if(node.right !== null) {\n                if ((heightNode(node.right) - heightNode(node.left)) > 1){\n                    // do rotations {4}\n                }\n            }\n        }\n\n    };\n\n    var inOrderTraverseNode = function(node, callback) {\n        if (node !== null){\n            inOrderTraverseNode(node.left, callback);\n            callback(node.key);\n            inOrderTraverseNode(node.right, callback);\n        }\n    };\n\n    var preOrderTraverseNode = function(node, callback) {\n        if(node !== null){\n            callback(node.key);\n            preOrderTraverseNode(node.left, callback);\n            preOrderTraverseNode(node.right, callback);\n        }\n    };\n\n    var postOrderTraverseNode = function(node, callback) {\n        if (node !== null) {\n            postOrderTraverseNode(node.left, callback);\n            postOrderTraverseNode(node.right, callback);\n            callback(node.key);\n        }\n    };\n\n    var minNode = function(node) {\n        if(node) {\n            while(node && node.left !== null){\n                node = node.left;\n            }\n\n            return node.key;\n        }\n        return null;\n    };\n\n    var maxNode = function(node) {\n        if (node) {\n            while (node && node.right !== null){\n                node = node.right;\n            }\n\n            return node.key;\n        }\n        return null;\n    };\n\n    var searchNode= function(node, key){\n        if (node === null){\n            return false;\n        }\n\n        if (key < node.key){\n            return searchNode(node.left, key);\n        }else if (key > node.key){\n            return searchNode(node.right, key);\n        }else {\n            return true;\n        }\n    };\n\n    var findMinNode = function(node) {\n        while (node && node.left !== null){\n            node = node.left;\n        }\n        return node;\n    };\n\n    var removeNode = function(node, key){\n        if (node === null){\n            return null;\n        }\n\n        if (key < node.key){\n            node.left = removeNode(node.left, key);\n            return node;\n        }else if ( key > node.key){\n            node.right = removeNode(node.right, key);\n            return node;\n        } else { // key is equal to node.key\n\n            // case 1 - a leaf node\n            if (node.left === null && node.right === null) {\n                node = null;\n                return node;\n            }\n            // case 2 - a node with only one child\n            if (node.left === null){\n                node = node.right;\n                return node;\n            } else if (node.right === null){\n                node = node.left;\n                return node;\n            }\n\n\n            // case 3 = a node with 2 children\n            var aux = findMinNode(node.right);\n            node.key = aux.key;\n            node.right = removeNode(node.right, aux.key);\n            return node;\n\n            //\n        }\n    };\n\n    this.insert = function(key){\n        var newNode = new Node(key);\n\n        if(root == null){\n            root = newNode;\n        }else {\n            insertNode(root, newNode);\n        }\n    };\n\n    this.search = function(key) {\n        return searchNode(root, key);\n    };\n\n    this.inOrderTraverse = function(callback){\n        inOrderTraverseNode(root, callback);\n    };\n\n    this.preOrderTraverse = function(callback) {\n        preOrderTraverseNode(root, callback);\n    };\n\n    this.postOrderTraverse = function(callback) {\n        postOrderTraverseNode(root, callback)\n    };\n\n    this.min = function() {\n        return minNode(root);\n    };\n\n    this.max = function() {\n        return maxNode(root);\n    };\n\n    this.remove = function(key) {\n        root = removeNode(root, key);\n    }\n\n\n}\n\nfunction printNode(value) {\n    console.log(value);\n}\n\nvar tree = new BinarySearchTree();\ntree.insert(11);\ntree.insert(7);\ntree.insert(15);\ntree.insert(5);\ntree.insert(3);\ntree.insert(9);\ntree.insert(8);\ntree.insert(10);\ntree.insert(13);\ntree.insert(12);\ntree.insert(14);\ntree.insert(20);\ntree.insert(18);\ntree.insert(25);\n\ntree.insert(6);\nconsole.log('In order ==============')\n//tree.inOrderTraverse(printNode);\n\nconsole.log('pre order ==============')\n\n//tree.preOrderTraverse(printNode);\n\nconsole.log('post order ==============')\n\n//tree.postOrderTraverse(printNode);\n\nconsole.log(tree.search(1) ? 'Key 1 found.' : 'Key 1 not found.');\nconsole.log(tree.search(8) ? 'Key 8 found.' : 'Key 8 not found.');"]}