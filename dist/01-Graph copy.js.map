{"version":3,"sources":["../01-Graph copy.js"],"names":["Graph","vertices","adjList","Dictionary","addVertex","v","push","set","addEdge","w","get","toString","s","i","length","neighbors","j","initializeColor","color","bfs","callback","queue","Queue","enqueue","isEmpty","u","dequeue","dfs","dfsVisit","console","log","BFS","d","pred","distances","predecessors","time","DFS","f","p","DFSVisit","discovery","finished"],"mappings":"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","file":"01-Graph copy.js","sourcesContent":["function Graph() {\n\n    var vertices = []; //list\n\n    var adjList = new Dictionary();\n\n    this.addVertex = function(v){\n        vertices.push(v);\n        adjList.set(v, []); //initialize adjacency list with array as well;\n    };\n\n    this.addEdge = function(v, w){\n        adjList.get(v).push(w);\n        //adjList.get(w).push(v); //commented to run the improved DFS with topological sorting\n    };\n\n    this.toString = function(){\n        var s = '';\n        for (var i=0; i<vertices.length; i++){\n            s += vertices[i] + ' -> ';\n            var neighbors = adjList.get(vertices[i]);\n            for (var j=0; j<neighbors.length; j++){\n                s += neighbors[j] + ' ';\n            }\n            s += '\\n';\n        }\n        return s;\n    };\n\n    var initializeColor = function(){\n        var color = {};\n        for (var i=0; i<vertices.length; i++){\n            color[vertices[i]] = 'white';\n        }\n        return color;\n    };\n\n    this.bfs = function(v, callback){\n\n        var color = initializeColor(),\n            queue = new Queue();\n        queue.enqueue(v);\n\n        while (!queue.isEmpty()){\n            var u = queue.dequeue(),\n                neighbors = adjList.get(u);\n            color[u] = 'grey';\n            for (var i=0; i<neighbors.length; i++){\n                var w = neighbors[i];\n                if (color[w] === 'white'){\n                    color[w] = 'grey';\n                    queue.enqueue(w);\n                }\n            }\n            color[u] = 'black';\n            if (callback) {\n                callback(u);\n            }\n        }\n    };\n\n    this.dfs = function(callback){\n\n        var color = initializeColor();\n\n        for (var i=0; i<vertices.length; i++){\n            if (color[vertices[i]] === 'white'){\n                dfsVisit(vertices[i], color, callback);\n            }\n        }\n    };\n\n    var dfsVisit = function(u, color, callback){\n\n        color[u] = 'grey';\n        if (callback) {\n            callback(u);\n        }\n        console.log('Discovered ' + u);\n        var neighbors = adjList.get(u);\n        for (var i=0; i<neighbors.length; i++){\n            var w = neighbors[i];\n            if (color[w] === 'white'){\n                dfsVisit(w, color, callback);\n            }\n        }\n        color[u] = 'black';\n        console.log('explored ' + u);\n    };\n\n\n    this.BFS = function(v){\n\n        var color = initializeColor(),\n            queue = new Queue(),\n            d = {},\n            pred = {};\n        queue.enqueue(v);\n\n        for (var i=0; i<vertices.length; i++){\n            d[vertices[i]] = 0;\n            pred[vertices[i]] = null;\n        }\n\n        while (!queue.isEmpty()){\n            var u = queue.dequeue(),\n                neighbors = adjList.get(u);\n            color[u] = 'grey';\n            for (i=0; i<neighbors.length; i++){\n                var w = neighbors[i];\n                if (color[w] === 'white'){\n                    color[w] = 'grey';\n                    d[w] = d[u] + 1;\n                    pred[w] = u;\n                    queue.enqueue(w);\n                }\n            }\n            color[u] = 'black';\n        }\n\n        return {\n            distances: d,\n            predecessors: pred\n        };\n    };\n\n    var time = 0;\n    this.DFS = function(){\n\n        var color = initializeColor(),\n            d = {},\n            f = {},\n            p = {};\n        time = 0;\n\n        for (var i=0; i<vertices.length; i++){\n            f[vertices[i]] = 0;\n            d[vertices[i]] = 0;\n            p[vertices[i]] = null;\n        }\n\n        for (i=0; i<vertices.length; i++){\n            if (color[vertices[i]] === 'white'){\n                DFSVisit(vertices[i], color, d, f, p);\n            }\n        }\n\n        return {\n            discovery: d,\n            finished: f,\n            predecessors: p\n        };\n    };\n\n    var DFSVisit = function(u, color, d, f, p){\n\n        console.log('discovered ' + u);\n        color[u] = 'grey';\n        d[u] = ++time;\n        var neighbors = adjList.get(u);\n        for (var i=0; i<neighbors.length; i++){\n            var w = neighbors[i];\n            if (color[w] === 'white'){\n                p[w] = u;\n                DFSVisit(w,color, d, f, p);\n            }\n        }\n        color[u] = 'black';\n        f[u] = ++time;\n        console.log('explored ' + u);\n    };\n}"]}